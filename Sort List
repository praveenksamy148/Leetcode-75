/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return head; 
        } 
        ListNode *temp = NULL; 
        ListNode *slow = head, *fast = head; 
        while(fast && fast->next){
            temp = slow; 
            slow = slow->next; 
            fast = fast->next->next; 
        }
        temp->next = NULL; 
        //divide the list in half and now the slow pointer is at the middle
        //divide both sides into subsets until it reaches one; 
        ListNode *left = sortList(head); 
        ListNode *right = sortList(slow);
        return merge(left, right);  

    }

    ListNode *merge(ListNode *left, ListNode *right){
        ListNode *ptr = new ListNode(0); 
        ListNode *curr = ptr; 
        while(left && right){
            if(left->val <= right->val){
                curr->next = left; 
                left = left->next;  
            }
            else{
                curr->next = right; 
                right = right->next; 
            }
            curr = curr->next; 
        }

        //for unequal lengths of linked list 
        if(left){
            curr->next = left; 
            left = left->next; 
        }
        if(right){
            curr->next = right; 
            right = right->next; 
        }
        return ptr->next; 
    }
};
