class Solution {
public:
    int numberOfGoodSubarraySplits(vector<int>& nums) { 
  //Attempted solution 510/555
        // unsigned long long int count = 1; 
        // vector<int>oneIndex; 
        // for(int i = 0; i < nums.size(); i++){
        //     if(nums[i] == 1){
        //         oneIndex.push_back(i);
        //     }
        // }
        // if(oneIndex.size() == 1){
        //     return 1;
        // }
        // if(oneIndex.size() == 0){
        //     return 0; 
        // }
        // for(int i = 1; i < oneIndex.size(); i++){
        //     cout<<count<<endl;
        //     count *= ((oneIndex[i] - oneIndex[i-1]) % 1000000007);
        // }
        // return count; 

//Proper solution
    long long ans = 1, m = 1000000007, count  = 0;
    int i = 0;
    while(i < nums.size() && nums[i] == 0) ++i;
    if(i >= nums.size() ) return 0;
    while(i < nums.size()){
        if(nums[i] == 1){  ans = (ans * (count +1 ))%m;  count = 0; }
        else count++;
        i++;
    }
    return ans;

    }
};
